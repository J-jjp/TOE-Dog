/**********************************************************************
 Copyright (c) 2020-2023, Unitree Robotics.Co.Ltd. All rights reserved.
***********************************************************************/
#include "FSM/State_Rl.h"
State_Rl::State_Rl(CtrlComponents *ctrlComp)
             :FSMState(ctrlComp, FSMStateName::Rl, " rl model"){

}

void State_Rl::enter(){
    for(int i=0; i<4; i++){
        _lowCmd->setSimrlGain(i);
        // else if(_ctrlComp->ctrlPlatform == CtrlPlatform::REALROBOT){
        //     _lowCmd->setRealrlGain(i);
        // }
    }
    for (size_t i = 0; i < Num_observations; i++)
    {
        policy_input[0][i]=0;
    }
    for (size_t i = 0; i < Num_observations; i++)
    {
        last_lowCmd[i]=0;
    }
    for (size_t i = 0; i < History_len*N_proprio; i++)
    {
        obs_history[0][i]=0;
    }
}

void State_Rl::run(){
    stateMachine();
    mnnInference();
    
}

void State_Rl::exit(){
    _ctrlComp->ioInter->zeroCmdPanel();
}

FSMStateName State_Rl::checkChange(){
    if(_lowState->userCmd == UserCommand::FIXED){
        return FSMStateName::FIXEDSTAND;
    }
    else if(_lowState->userCmd == UserCommand::PASS){
        return FSMStateName::PASSIVE;
    }
    else{
        return FSMStateName::Rl;
    }
}
void State_Rl::mnnInference()
{
    // for(int i=0;i<Num_dof;i++){
    //     last_lowCmd[i]=_lowCmd->motorCmd[i].q;
    // }
    // memmove(action_history,action_history+Num_dof,(History_len-1)*Num_dof*sizeof(float));
    // memcpy(action_history+(History_len-1)*Num_dof,last_lowCmd,Num_dof*sizeof(float));
    Vec3 eu_ang;
    eu_ang = quaternion_to_euler_array(_lowState->imu.getQuat());
    for (size_t i = 0; i < 3; i++)
    {
        obs[0][i] = _lowState->imu.gyroscope[i] *obs_scales_ang_vel;
        obs[0][i+3] = eu_ang[0] *obs_scales_quat;
    }
    obs[0][6] = 0.25* obs_scales_lin_vel;
    obs[0][7] = 0 * obs_scales_lin_vel;
    obs[0][8] = 0.25 * obs_scales_ang_vel;
    for (size_t i = 0; i < 12; i++)
    {
        obs[0][9+i] = (_lowState->motorState[i].q-default_dof_pos[i]) *obs_scales_dof_pos;
        obs[0][21+i] = _lowState->motorState[i].dq * obs_scales_dof_vel;
        obs[0][33+i] = last_lowCmd[i];
    }
    for (size_t i = 0; i < N_proprio; i++)
    {
        policy_input[0][i] = obs[0][i];
    }
    for (size_t i = 0; i < N_priv_latent  + N_scan; i++)
    {
        policy_input[0][i+N_proprio]=0;
    }
    for (size_t i = 0; i < History_len*N_proprio; i++)
    {
        policy_input[0][i+N_proprio+N_priv_latent+N_scan]=obs_history[0][i];
    }
    // for (size_t i = 0; i < Num_observations; i++)
    // {
    //     policy_input[0][i]=0;
    // }
    // float a[Num_observations]={9.2365e-02,  5.6608e-02, -3.3421e-03, -1.5566e-02, -1.6701e-02,
    //       1.2681e-01,  2.0000e+00,  0.0000e+00, -1.5851e-02, -8.9120e-02,
    //       3.7259e-01, -6.7033e-01, -3.6769e-01,  1.6264e-01, -2.2166e-01,
    //       8.6755e-03,  5.8296e-01,  2.3424e-01, -2.8537e-01,  9.7298e-01,
    //      -5.0718e-01, -3.3974e-02,  1.6641e-01, -3.3328e-02, -4.0370e-02,
    //       1.1146e-01, -4.4434e-03, -6.3016e-02, -1.0069e-02,  6.4748e-02,
    //       6.1178e-02,  6.1957e-03, -7.2610e-02, -4.7534e-01,  8.4082e-01,
    //      -7.6465e-01, -6.4453e-01,  1.7419e-01, -2.2141e-02, -1.4282e-01,
    //       1.1865e+00,  1.1133e+00, -7.5049e-01,  2.7812e+00, -1.5811e+00,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01, -9.0024e-01,
    //      -9.0024e-01, -9.0024e-01,  1.3726e+00,  1.5822e-01, -3.3606e-02,
    //       5.0000e-01,  5.0000e-01,  5.0000e-01, -5.0000e-01,  1.0000e+00,
    //       0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  1.0000e+00,
    //       0.0000e+00,  1.0688e+00,  8.9270e-01,  1.0870e+00,  9.3729e-01,
    //       1.1623e+00,  1.0584e+00,  8.3304e-01,  1.0028e+00,  1.0276e+00,
    //       1.1598e+00,  1.1258e+00,  8.6100e-01,  8.9896e-01,  9.9563e-01,
    //       1.0311e+00,  1.1754e+00,  1.0865e+00,  1.1029e+00,  9.2758e-01,
    //       8.7044e-01,  1.0589e+00,  1.1879e+00,  1.1549e+00,  9.9266e-01,
    //       1.1031e+00,  9.7027e-01,  1.1469e+00,  8.0833e-01,  1.1238e+00,
    //       1.0209e+00,  1.1327e+00,  1.1367e+00,  1.1204e+00,  9.2340e-01,
    //       9.3674e-01,  1.1990e+00,  2.3666e-02,  2.3237e-02,  2.1319e-02,
    //       1.3235e-01, -1.1283e-01,  2.7013e-02, -1.8566e-02, -6.5300e-02,
    //      -6.9235e-02,  1.1267e-01,  2.0000e+00,  0.0000e+00, -1.4084e-02,
    //      -7.0874e-02,  7.9169e-01, -3.3064e-01, -4.7955e-01, -1.0752e-01,
    //      -3.3036e-01, -6.4603e-02,  8.0995e-01, -1.4763e-01, -1.1969e-01,
    //       5.5070e-01,  2.8589e-02,  4.6298e-02,  2.0379e-02,  1.5133e-01,
    //       8.2859e-02, -1.6015e-01,  1.2839e-02,  3.7652e-02,  1.8217e-02,
    //      -1.3831e-01,  4.3718e-02, -2.8891e-02,  1.9304e-01, -3.4082e-01,
    //       8.3057e-01,  5.4102e-01, -1.3555e+00, -4.6143e-01, -8.9600e-01,
    //       4.1138e-02,  2.4414e+00, -6.5234e-01,  3.5076e-03,  1.3535e+00,
    //       9.5557e-01, -1.1211e-01,  8.3591e-03,  1.1143e-02, -8.1862e-02,
    //      -6.8316e-02,  1.1305e-01,  2.0000e+00,  0.0000e+00, -1.4131e-02,
    //      -4.1698e-02,  7.9503e-01, -2.6380e-01, -4.2380e-01, -1.5423e-01,
    //      -2.8602e-01, -3.2807e-02,  8.0099e-01, -2.2569e-01, -8.7832e-02,
    //       5.3859e-01,  1.1131e-01,  5.9667e-02, -3.4864e-03,  1.8135e-01,
    //       1.2779e-01, -7.3575e-02,  7.8349e-02,  5.0335e-02, -5.3739e-02,
    //      -1.4375e-01,  6.9643e-02, -2.5461e-02,  2.0903e-01, -1.3672e-02,
    //       5.2100e-01,  5.6104e-01, -1.1924e+00, -4.5996e-01, -6.8506e-01,
    //       7.3914e-02,  2.2031e+00, -8.9160e-01,  9.6252e-02,  1.4980e+00,
    //       8.1641e-01,  1.1480e-01, -3.8380e-02,  4.6650e-03, -8.5183e-02,
    //      -6.9973e-02,  1.1420e-01,  2.0000e+00,  0.0000e+00, -1.4275e-02,
    //      -1.9801e-02,  7.8859e-01, -1.8343e-01, -3.6781e-01, -1.7586e-01,
    //      -2.1258e-01, -1.6346e-02,  7.6258e-01, -2.8321e-01, -2.6902e-02,
    //       5.5827e-01,  1.6787e-01,  2.4984e-02, -2.3082e-02,  2.1190e-01,
    //       1.1881e-01, -2.0468e-02,  1.2787e-01,  6.2320e-03, -1.1371e-01,
    //      -1.0870e-01,  1.1534e-01,  5.4363e-02,  1.3738e-01,  1.2238e-01,
    //       6.3477e-01,  1.1743e-01, -9.6729e-01, -5.0537e-01, -4.1382e-01,
    //       7.3792e-02,  2.0234e+00, -9.7510e-01,  4.6722e-02,  1.6572e+00,
    //       6.0938e-01,  2.6076e-01, -6.0431e-02,  1.6777e-02, -7.2728e-02,
    //      -7.3597e-02,  1.1586e-01,  2.0000e+00,  0.0000e+00, -1.4482e-02,
    //       9.5211e-03,  7.6543e-01, -1.6282e-01, -3.1021e-01, -1.9973e-01,
    //      -8.6308e-02, -4.7763e-03,  7.1251e-01, -2.6280e-01, -2.1525e-02,
    //       5.9520e-01,  1.7023e-01, -2.1885e-03,  2.2652e-02,  1.3258e-01,
    //       1.5436e-01, -2.7524e-02,  2.1504e-01,  4.3534e-03,  4.1267e-02,
    //       1.6292e-01, -6.5220e-02,  8.4014e-02,  2.1078e-02,  1.1200e-01,
    //       1.3008e+00, -1.0020e+00, -6.1963e-01, -6.3525e-01,  8.5999e-02,
    //      -3.1128e-03,  1.7617e+00, -7.6660e-01, -1.8970e-01,  1.8496e+00,
    //       4.7314e-01,  2.4030e-01,  9.7058e-02,  4.6496e-02, -4.4096e-02,
    //      -6.8685e-02,  1.1880e-01,  2.0000e+00,  0.0000e+00, -1.4850e-02,
    //       1.1312e-02,  7.2964e-01, -4.3356e-01, -3.1148e-01, -1.6591e-01,
    //      -5.9452e-02, -2.3179e-03,  7.0050e-01, -1.9334e-01, -8.1576e-02,
    //       6.4110e-01,  9.7357e-02,  8.6313e-02, -2.9178e-01, -5.1212e-01,
    //      -2.9625e-02,  2.5515e-01, -2.6221e-01,  2.2518e-02, -3.5714e-02,
    //       1.6646e-01, -1.3469e-01,  8.0141e-02, -1.0354e-01, -1.1115e-01,
    //       1.5498e+00, -2.2676e+00, -3.2300e-01, -7.0654e-01,  5.7080e-01,
    //      -2.6611e-01,  1.1318e+00, -1.5454e-01, -5.0537e-01,  2.0293e+00,
    //      -5.4741e-03,  1.4565e-01,  1.2101e-01,  3.8519e-02, -2.4684e-02,
    //      -5.9987e-02,  1.2191e-01,  2.0000e+00,  0.0000e+00, -1.5239e-02,
    //       2.2897e-02,  5.6539e-01, -6.3845e-01, -3.2958e-01, -9.4968e-02,
    //      -1.2056e-01,  4.5748e-03,  6.8038e-01, -1.2328e-01, -1.3229e-01,
    //       7.0853e-01, -4.0887e-02,  1.4699e-02, -4.3944e-01, -3.9869e-01,
    //      -3.5409e-02,  1.9751e-01, -1.8972e-01,  2.0042e-02, -4.7962e-02,
    //       1.6088e-01, -1.1371e-01,  1.2356e-01, -2.2878e-01,  1.1853e-01,
    //       1.2744e+00, -2.3750e+00, -3.6670e-01, -5.9912e-01,  5.6689e-01,
    //      -6.6455e-01,  1.3213e+00,  6.4746e-01, -5.6641e-01,  2.2539e+00,
    //      -5.9912e-01,  1.4048e-02,  1.1138e-01,  2.3512e-02, -1.3545e-02,
    //      -5.2061e-02,  1.2412e-01,  2.0000e+00,  0.0000e+00, -1.5515e-02,
    //       6.4644e-03,  4.0781e-01, -7.3220e-01, -3.4072e-01, -3.1772e-02,
    //      -1.6308e-01,  1.0987e-02,  6.6091e-01, -5.2681e-02, -1.8059e-01,
    //       7.9370e-01, -1.9235e-01, -4.0444e-02, -3.2259e-01, -1.8520e-01,
    //      -1.1671e-02,  1.8705e-01, -1.5047e-01,  2.4832e-02, -3.6693e-02,
    //       1.5044e-01, -1.0200e-01,  1.7559e-01, -2.6080e-01,  4.6326e-02,
    //       1.0859e+00, -2.3047e+00, -5.6641e-01, -6.1914e-01,  4.4434e-01,
    //      -5.3174e-01,  1.4385e+00,  8.5742e-01, -7.2705e-01,  2.5586e+00,
    //      -1.0342e+00, -8.0167e-02,  1.1224e-01,  1.4334e-02, -9.1934e-03,
    //      -4.4734e-02,  1.2558e-01,  2.0000e+00,  0.0000e+00, -1.5697e-02,
    //      -3.2515e-02,  3.1046e-01, -7.3796e-01, -3.4790e-01,  2.5887e-02,
    //      -1.9190e-01,  1.5655e-02,  6.4415e-01,  1.7111e-02, -2.3780e-01,
    //       8.8097e-01, -3.2265e-01, -8.0983e-02, -1.7600e-01, -1.5457e-02,
    //      -3.2746e-03,  1.7299e-01, -1.1763e-01,  2.7101e-02, -2.8760e-02,
    //       1.4615e-01, -1.1044e-01,  1.8106e-01, -2.3203e-01, -1.6516e-01,
    //       8.7256e-01, -2.0684e+00, -7.4805e-01, -4.9731e-01,  2.3047e-01,
    //      -3.7939e-01,  1.4834e+00,  7.9443e-01, -8.7256e-01,  2.7441e+00,
    //      -1.3398e+00, -1.8391e-01,  1.4463e-01,  4.4601e-03, -1.4616e-02,
    //      -3.5186e-02,  1.2625e-01,  2.0000e+00,  0.0000e+00, -1.5781e-02,
    //      -7.7084e-02,  2.4587e-01, -6.3135e-01, -3.4946e-01,  7.7126e-02,
    //      -2.1116e-01,  2.1333e-02,  6.2732e-01,  8.6074e-02, -2.7924e-01,
    //       9.4249e-01, -4.1209e-01, -1.1615e-01, -1.1159e-01,  1.9045e-01,
    //       6.1450e-03,  1.4922e-01, -8.4083e-02,  3.0889e-02, -3.2259e-02,
    //       1.4929e-01, -5.8966e-02,  1.0967e-01, -1.6505e-01, -3.9478e-01,
    //       6.5479e-01, -1.4082e+00, -8.1348e-01, -2.2046e-01,  4.7333e-02,
    //      -2.6025e-01,  1.4639e+00,  7.5195e-01, -8.9111e-01,  2.7734e+00,
    //      -1.4678e+00,  5.0663e-02,  1.2232e-01,  6.4334e-03, -1.9026e-02,
    //      -2.3230e-02,  1.2725e-01,  2.0000e+00,  0.0000e+00, -1.5906e-02,
    //      -7.8753e-02,  3.1106e-01, -6.6045e-01, -3.5642e-01,  1.2306e-01,
    //      -2.2422e-01,  2.0993e-02,  6.0608e-01,  1.5566e-01, -3.0853e-01,
    //       9.6100e-01, -4.6604e-01, -2.5176e-02,  1.7929e-01, -8.6170e-02,
    //      -4.3489e-02,  1.2990e-01, -5.0428e-02, -2.7029e-02, -3.1898e-02,
    //       1.4247e-01, -5.5595e-02,  2.9806e-02, -1.1213e-01, -4.4751e-01,
    //       6.5674e-01, -7.7051e-01, -7.7734e-01,  7.4097e-02, -9.0820e-02,
    //      -1.3135e-01,  1.3926e+00,  9.4238e-01, -8.8281e-01,  2.7051e+00,
    //      -1.4990e+00};
    // for (size_t i = 0; i < Num_observations; i++)
    // {
    //     policy_input[0][i]=a[i];
    // }
    for (size_t i = 0; i < (History_len-1)*N_proprio; i++)
    {
        obs_history[0][i] = obs_history[0][i+N_proprio];
    }
    for (size_t i = 0; i < N_proprio; i++)
    {
        obs_history[0][((History_len-1)*N_proprio)+i] = obs[0][i];
    }
    rlptr->advanceNNsync(policy_input,action_cmd);
    for (size_t i = 0; i < 12; i++)
    {
        std::cout<<"action_cmd"<<action_cmd[0][i];
    }
    std::cout<<std::endl;
    float action_flt[12];
    for (size_t i = 0; i < 12; i++)
    {
        action_flt[i]=action_cmd[0][i]*0.8+last_lowCmd[i]*0.2;
    }
    for (size_t i = 0; i < 12; i++)
    {
        last_lowCmd[i]=action_cmd[0][i];
    }
    for (size_t i = 0; i < 12; i++)
    {
        _lowCmd->motorCmd[i].q = action_flt[i] * 0.35 + default_dof_pos[i];
    }
    // _lowCmd->motorCmd[6].q = 0.0;
    // _lowCmd->motorCmd[7].q = 3.0;
    // _lowCmd->motorCmd[8].q = 3.0;
}

void State_Rl::stateMachine(){
    if (rlptr == nullptr)
    {
      std::string mobModelPath = "../go2.mnn";
      rlptr = std::make_shared<rl_Inference>(mobModelPath);
      rlptr->initBuffer();
    }
    rlptr->resetNode();
}
Vec3 State_Rl::quaternion_to_euler_array(Vec4 quat){
    double x = quat[1];
    double y = quat[2];
    double z = quat[3];
    double w = quat[0];
    double t0, t1, t2, t3,t4;
    double roll_x, pitch_y, yaw_z;
    t0 = +2.0 * (w * x + y * z);
    t1 = +1.0 - 2.0 * (x * x + y * y);
    roll_x = std::atan2(t0, t1);
    
    t2 = +2.0 * (w * y - z * x);
    t2 = std::max(-1.0, std::min(t2, 1.0));
    pitch_y =  std::asin(t2);
    
    t3 = +2.0 * (w * z + x * y);
    t4 = +1.0 - 2.0 * (y * y + z * z);
    yaw_z =  std::atan2(t3, t4);
    return {roll_x, pitch_y, yaw_z};
}