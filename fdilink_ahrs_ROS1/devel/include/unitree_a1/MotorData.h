// Generated by gencpp from file unitree_a1/MotorData.msg
// DO NOT EDIT!


#ifndef UNITREE_A1_MESSAGE_MOTORDATA_H
#define UNITREE_A1_MESSAGE_MOTORDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace unitree_a1
{
template <class ContainerAllocator>
struct MotorData_
{
  typedef MotorData_<ContainerAllocator> Type;

  MotorData_()
    : legid()
    , motorid()
    , mode()
    , tau()
    , vel()
    , acc()
    , pos()
    , temp()
    , error()  {
    }
  MotorData_(const ContainerAllocator& _alloc)
    : legid(_alloc)
    , motorid(_alloc)
    , mode(_alloc)
    , tau(_alloc)
    , vel(_alloc)
    , acc(_alloc)
    , pos(_alloc)
    , temp(_alloc)
    , error(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _legid_type;
  _legid_type legid;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _motorid_type;
  _motorid_type motorid;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _mode_type;
  _mode_type mode;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _tau_type;
  _tau_type tau;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _vel_type;
  _vel_type vel;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _acc_type;
  _acc_type acc;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _pos_type;
  _pos_type pos;

   typedef std::vector<int8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int8_t>> _temp_type;
  _temp_type temp;

   typedef std::vector<int8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int8_t>> _error_type;
  _error_type error;





  typedef boost::shared_ptr< ::unitree_a1::MotorData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::unitree_a1::MotorData_<ContainerAllocator> const> ConstPtr;

}; // struct MotorData_

typedef ::unitree_a1::MotorData_<std::allocator<void> > MotorData;

typedef boost::shared_ptr< ::unitree_a1::MotorData > MotorDataPtr;
typedef boost::shared_ptr< ::unitree_a1::MotorData const> MotorDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::unitree_a1::MotorData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::unitree_a1::MotorData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::unitree_a1::MotorData_<ContainerAllocator1> & lhs, const ::unitree_a1::MotorData_<ContainerAllocator2> & rhs)
{
  return lhs.legid == rhs.legid &&
    lhs.motorid == rhs.motorid &&
    lhs.mode == rhs.mode &&
    lhs.tau == rhs.tau &&
    lhs.vel == rhs.vel &&
    lhs.acc == rhs.acc &&
    lhs.pos == rhs.pos &&
    lhs.temp == rhs.temp &&
    lhs.error == rhs.error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::unitree_a1::MotorData_<ContainerAllocator1> & lhs, const ::unitree_a1::MotorData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace unitree_a1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::unitree_a1::MotorData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::unitree_a1::MotorData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unitree_a1::MotorData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unitree_a1::MotorData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unitree_a1::MotorData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unitree_a1::MotorData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::unitree_a1::MotorData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3b3e3cad6f8f2ba7b0cdd1200569952b";
  }

  static const char* value(const ::unitree_a1::MotorData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3b3e3cad6f8f2ba7ULL;
  static const uint64_t static_value2 = 0xb0cdd1200569952bULL;
};

template<class ContainerAllocator>
struct DataType< ::unitree_a1::MotorData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "unitree_a1/MotorData";
  }

  static const char* value(const ::unitree_a1::MotorData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::unitree_a1::MotorData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8[] legid\n"
"uint8[] motorid\n"
"uint8[] mode\n"
"float32[] tau\n"
"float32[] vel\n"
"float32[] acc\n"
"float32[] pos\n"
"int8[] temp\n"
"int8[] error\n"
;
  }

  static const char* value(const ::unitree_a1::MotorData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::unitree_a1::MotorData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.legid);
      stream.next(m.motorid);
      stream.next(m.mode);
      stream.next(m.tau);
      stream.next(m.vel);
      stream.next(m.acc);
      stream.next(m.pos);
      stream.next(m.temp);
      stream.next(m.error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::unitree_a1::MotorData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::unitree_a1::MotorData_<ContainerAllocator>& v)
  {
    s << indent << "legid[]" << std::endl;
    for (size_t i = 0; i < v.legid.size(); ++i)
    {
      s << indent << "  legid[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.legid[i]);
    }
    s << indent << "motorid[]" << std::endl;
    for (size_t i = 0; i < v.motorid.size(); ++i)
    {
      s << indent << "  motorid[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.motorid[i]);
    }
    s << indent << "mode[]" << std::endl;
    for (size_t i = 0; i < v.mode.size(); ++i)
    {
      s << indent << "  mode[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.mode[i]);
    }
    s << indent << "tau[]" << std::endl;
    for (size_t i = 0; i < v.tau.size(); ++i)
    {
      s << indent << "  tau[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.tau[i]);
    }
    s << indent << "vel[]" << std::endl;
    for (size_t i = 0; i < v.vel.size(); ++i)
    {
      s << indent << "  vel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.vel[i]);
    }
    s << indent << "acc[]" << std::endl;
    for (size_t i = 0; i < v.acc.size(); ++i)
    {
      s << indent << "  acc[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.acc[i]);
    }
    s << indent << "pos[]" << std::endl;
    for (size_t i = 0; i < v.pos.size(); ++i)
    {
      s << indent << "  pos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pos[i]);
    }
    s << indent << "temp[]" << std::endl;
    for (size_t i = 0; i < v.temp.size(); ++i)
    {
      s << indent << "  temp[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.temp[i]);
    }
    s << indent << "error[]" << std::endl;
    for (size_t i = 0; i < v.error.size(); ++i)
    {
      s << indent << "  error[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.error[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // UNITREE_A1_MESSAGE_MOTORDATA_H
