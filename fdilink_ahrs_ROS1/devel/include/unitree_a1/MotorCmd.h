// Generated by gencpp from file unitree_a1/MotorCmd.msg
// DO NOT EDIT!


#ifndef UNITREE_A1_MESSAGE_MOTORCMD_H
#define UNITREE_A1_MESSAGE_MOTORCMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace unitree_a1
{
template <class ContainerAllocator>
struct MotorCmd_
{
  typedef MotorCmd_<ContainerAllocator> Type;

  MotorCmd_()
    : legid()
    , motorid()
    , mode()
    , tau()
    , vel()
    , pos()
    , kp()
    , kd()  {
    }
  MotorCmd_(const ContainerAllocator& _alloc)
    : legid(_alloc)
    , motorid(_alloc)
    , mode(_alloc)
    , tau(_alloc)
    , vel(_alloc)
    , pos(_alloc)
    , kp(_alloc)
    , kd(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _legid_type;
  _legid_type legid;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _motorid_type;
  _motorid_type motorid;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _mode_type;
  _mode_type mode;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _tau_type;
  _tau_type tau;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _vel_type;
  _vel_type vel;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _pos_type;
  _pos_type pos;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _kp_type;
  _kp_type kp;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _kd_type;
  _kd_type kd;





  typedef boost::shared_ptr< ::unitree_a1::MotorCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::unitree_a1::MotorCmd_<ContainerAllocator> const> ConstPtr;

}; // struct MotorCmd_

typedef ::unitree_a1::MotorCmd_<std::allocator<void> > MotorCmd;

typedef boost::shared_ptr< ::unitree_a1::MotorCmd > MotorCmdPtr;
typedef boost::shared_ptr< ::unitree_a1::MotorCmd const> MotorCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::unitree_a1::MotorCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::unitree_a1::MotorCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::unitree_a1::MotorCmd_<ContainerAllocator1> & lhs, const ::unitree_a1::MotorCmd_<ContainerAllocator2> & rhs)
{
  return lhs.legid == rhs.legid &&
    lhs.motorid == rhs.motorid &&
    lhs.mode == rhs.mode &&
    lhs.tau == rhs.tau &&
    lhs.vel == rhs.vel &&
    lhs.pos == rhs.pos &&
    lhs.kp == rhs.kp &&
    lhs.kd == rhs.kd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::unitree_a1::MotorCmd_<ContainerAllocator1> & lhs, const ::unitree_a1::MotorCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace unitree_a1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::unitree_a1::MotorCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::unitree_a1::MotorCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unitree_a1::MotorCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unitree_a1::MotorCmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unitree_a1::MotorCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unitree_a1::MotorCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::unitree_a1::MotorCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8cda35a8825431ce1f5b8477f459672b";
  }

  static const char* value(const ::unitree_a1::MotorCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8cda35a8825431ceULL;
  static const uint64_t static_value2 = 0x1f5b8477f459672bULL;
};

template<class ContainerAllocator>
struct DataType< ::unitree_a1::MotorCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "unitree_a1/MotorCmd";
  }

  static const char* value(const ::unitree_a1::MotorCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::unitree_a1::MotorCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8[] legid\n"
"uint8[] motorid\n"
"uint8[] mode\n"
"float32[] tau\n"
"float32[] vel\n"
"float32[] pos\n"
"float32[] kp\n"
"float32[] kd\n"
;
  }

  static const char* value(const ::unitree_a1::MotorCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::unitree_a1::MotorCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.legid);
      stream.next(m.motorid);
      stream.next(m.mode);
      stream.next(m.tau);
      stream.next(m.vel);
      stream.next(m.pos);
      stream.next(m.kp);
      stream.next(m.kd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::unitree_a1::MotorCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::unitree_a1::MotorCmd_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "legid: ";
    if (v.legid.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.legid.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<uint8_t>::stream(s, true ? std::string() : indent + "    ", v.legid[i]);
    }
    if (v.legid.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "motorid: ";
    if (v.motorid.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.motorid.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<uint8_t>::stream(s, true ? std::string() : indent + "    ", v.motorid[i]);
    }
    if (v.motorid.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "mode: ";
    if (v.mode.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.mode.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<uint8_t>::stream(s, true ? std::string() : indent + "    ", v.mode[i]);
    }
    if (v.mode.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "tau: ";
    if (v.tau.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.tau.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.tau[i]);
    }
    if (v.tau.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "vel: ";
    if (v.vel.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.vel.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.vel[i]);
    }
    if (v.vel.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "pos: ";
    if (v.pos.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.pos.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.pos[i]);
    }
    if (v.pos.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "kp: ";
    if (v.kp.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.kp.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.kp[i]);
    }
    if (v.kp.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "kd: ";
    if (v.kd.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.kd.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<float>::stream(s, true ? std::string() : indent + "    ", v.kd[i]);
    }
    if (v.kd.empty() || true)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // UNITREE_A1_MESSAGE_MOTORCMD_H
